plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.basistheory.android.compose.example'
    compileSdk 33

    defaultConfig {
        applicationId "com.basistheory.android.compose.example"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        buildConfigField 'String', 'BASIS_THEORY_API_KEY', tryFindProperty('com.basistheory.android.compose.example.apiKey')

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.7'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation project(':lib')

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.3.1'
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation 'androidx.compose.material:material:1.1.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.threeten:threetenbp:1.6.8'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"
}

/**
 * Searches for the value of a gradle property defined with the given name, preferring values
 * defined in local.properties, if available.
 * <p>
 * Note: buildConfigField requires a string value that is entered literally into an autogenerated source
 * file. Strings must be wrapped in quotes to be rendered as [String property = "value"] and the
 * string "null" is rendered as [String property = null] in the autogenerated BuildConfig file.
 */
String tryFindProperty(String name) {
    var localProperties = tryReadLocalProperties()
    var propertyValue = localProperties[name] ?: findProperty(name)

    return propertyValue != null
            ? "\"${propertyValue}\""
            : "null"
}

Properties tryReadLocalProperties() {
    def properties = new Properties()

    try {
        def propFile = rootProject.file("./local.properties")
        properties.load(new FileInputStream(propFile))
    } catch (ignored) {
    }

    return properties
}