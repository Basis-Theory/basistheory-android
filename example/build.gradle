plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.basistheory.example'
    compileSdk 32

    defaultConfig {
        applicationId "com.basistheory.example"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "BASIS_THEORY_API_URL", getLocalProperty("BASIS_THEORY_API_URL")
        buildConfigField "String", "BASIS_THEORY_API_KEY", getLocalProperty("BASIS_THEORY_API_KEY")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation project(':lib')

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'org.threeten:threetenbp:1.6.4'

    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'com.github.javafaker:javafaker:1.0.2'
}

String getLocalProperty(String name) {
    try {
        def propFile = rootProject.file("./local.properties")
        def properties = new Properties()
        properties.load(new FileInputStream(propFile))
        return properties[name]
    } catch (ignored) {
        throw new Exception("Property $name is required in ./local.properties file")
    }
}